"----------------
" Some Pre-config
"----------------
"{{{
" Vi compatible mode is disabled so that Vim things work properly
set nocompatible

" Setting the output encoding shown in the terminal
set encoding=UTF-8

" Let you hide a buffer (i.e. have a buffer that isn't shown in any window)
set hidden

" Enable mouse support
set mouse+=a
set ttymouse=sgr

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" To get rid of the original statusline
set noshowmode
set noshowcmd

" Give more space for displaying messages.
set cmdheight=2

" Load filetype-specific indent and plugin files
filetype plugin indent on

" Improve smoothness of redrawing
set ttyfast

" Skip redrawing screen in some cases
set lazyredraw

" Longer updatetime (default is 4000ms) leads to noticeable delays
set updatetime=300

" Create the 'undodir' folder and its parents if they don't exist
if !isdirectory($HOME."/.vim/undodir")
    call mkdir($HOME."/.vim/undodir", "p", 0700)
endif

" Backup config
set noswapfile
set nobackup
set nowritebackup
set undodir=~/.vim/undodir
set undofile

" Automatic vim-plug (plugin manager) installation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " --sync flag is used to block the execution until the installer finishes
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}

"---------------------
" Basic Editing Config
"---------------------
" {{{
" Turn on syntax highlighting
syntax on

" Show matching braces when text indicator is over them
set showmatch

" Use 4 spaces instead of tabs during formatting
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent

" Line numbering
set nu
set rnu

" Search config
set hlsearch
set incsearch
set ignorecase
set smartcase

" Visual autocompletion for command-line mode
set wildmenu
set wildmode=list:full

" Have lines wrap instead of continue off-screen
set linebreak

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Show lines above and below cursor (when possible)
set scrolloff=5

" Highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
"}}}

"---------------------
" Plugins Installation
"---------------------
" {{{
" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" ### Text editing ###
" Code completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Text alignment
Plug 'godlygeek/tabular'

" Comment stuff out
Plug 'tpope/vim-commentary'

" Easily delete, change and add surroundings in pairs.
Plug 'tpope/vim-surround'

" Wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
Plug 'tpope/vim-endwise'

" Linter
 Plug 'sheerun/vim-polyglot'

" Support for expanding HTML abbreviations like emmet
Plug 'mattn/emmet-vim'

" ### Files ###
" Fuzzy finder and more
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

" Tree explorer
Plug 'scrooloose/nerdtree'

" ### Git ###
" Git integration
Plug 'tpope/vim-fugitive'

" Git status in NERDTree explorer
Plug 'xuyuanp/nerdtree-git-plugin'

" Shows which lines have been added, modified, or removed and more
Plug 'airblade/vim-gitgutter'

" ### Utilities ###
" Multiple cursors
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Undo history visualizer
Plug 'mbbill/undotree'

" Display the indention levels
Plug 'yggdroot/indentline'

" A filetype plugin for csv files
Plug 'chrisbra/csv.vim'

" Displays the ctags-generated tags of the current file, ordered by their scope
" Plug 'majutsushi/tagbar'

" Navigate seamlessly between vim and tmux splits
" Plugin 'christoomey/vim-tmux-navigator'

" ### GUI ###
" Color scheme
Plug 'morhetz/gruvbox'

" Statusline and its themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Colored brackets
" Plug 'kien/rainbow_parentheses.vim'

" Preview colours in source code while editing
Plug 'ap/vim-css-color'

" Start screen for Vim
Plug 'mhinz/vim-startify'

" Adds file type icons and its colors (must be the last intalled plugin)
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

" Initialize plugin system
call plug#end()
" }}}

"------------
" Keybindings
"------------
" {{{
" ### General ###
" Setting <Leader> key to spacebar
let mapleader=" "

" Make backspace behave more reasonably, in that you can backspace over anything
set backspace=indent,eol,start

" Unbind the annoying 'Q' which in normal mode enters Ex mode and sometimes
" i forget to disable capslock what masses everything up in
" normal mode
nmap Q <Nop>
nmap J :echo "Maybe capslock is enabled, disable it."<CR>
nmap H :echo "Maybe capslock is enabled, disable it."<CR>
nmap L :echo "Maybe capslock is enabled, disable it."<CR>

" Search results are centered
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" Ctrl+s to stop searching
nnoremap <silent> <C-s> :nohlsearch<CR>

" Stop indenting when text is pasted
set pastetoggle=<F2>

" Toggle relative numbering
nnoremap <silent> <F3> :set rnu!<CR>

" (Shift+)Tab (de)indents code
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
" <S-Tab> doesn't work in insert mode as expected and I don't know how to solve it. Maybe S-Tab is already mapped
" inoremap <S-Tab> <C-d>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" C-k/C-j to move code lines/blocks up and down
nnoremap <silent> <C-j> :m .+1<CR>==
nnoremap <silent> <C-k> :m .-2<CR>==
inoremap <silent> <C-j> <Esc>:m .+1<CR>==gi
inoremap <silent> <C-k> <Esc>:m .-2<CR>==gi
vnoremap <silent> <C-j> :m '>+1<CR>gv=gv
vnoremap <silent> <C-k> :m '<-2<CR>gv=gv

" Fast edit '.vimrc' file
nmap <Leader>rc :tabnew $MYVIMRC<CR>

" Replace all occurences of selection
vnoremap <leader>ra y:%s/<C-r><C-r>"//g<Left><Left>

" Find/replace in line selection
xnoremap <leader>rl :s//g<Left><Left>

" " Copy/Paste/Cut
" if has('unnamedplus')
"     " Always have the clipboard be the same as my regular clipboard
"     set clipboard=unnamed,unnamedplus
" else
"     noremap YY "+y<CR>
"     noremap <Leader>p "+gP<CR>
"     noremap XX "+x<CR>
" endif

" ### Buffers ###
" Navigation between buffers
nnoremap <silent> <Leader>bl :bn<CR>
nnoremap <silent> <Leader>bh :bp<CR>

" Close buffer
nnoremap <silent> <Leader>bc :bd<CR>

" ### Tabs ###
" Navigate through tabs
nnoremap <silent> <Leader>tn :tabnew<CR>
nnoremap <silent> <Leader>tc :tabclose<CR>
nnoremap <silent> <Leader>tl :tabnext<CR>
nnoremap <silent> <Leader>th :tabprev<CR>

" Tab navigation using the the leader key and number row
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt

" ### Windows ###
" Navigation through windows
nnoremap <silent> <Leader>h :wincmd h<CR>
nnoremap <silent> <Leader>j :wincmd j<CR>
nnoremap <silent> <Leader>k :wincmd k<CR>
nnoremap <silent> <Leader>l :wincmd l<CR>

" Split window
nnoremap <silent> <Leader>wh :sp<CR>
nnoremap <silent> <Leader>wv :vsp<CR>

" Close window
nnoremap <silent> <Leader>wc :wincmd c<CR>

" Swap windows
" TODO(#1): close NERDTree if it is open b4 swapping windows and reopen it after that.
nnoremap <silent> <Leader>ws :wincmd R<CR>

" Resize window
noremap <silent> <Leader><Left> :vertical resize +5<CR>
noremap <silent> <Leader><Right> :vertical resize -5<CR>
noremap <silent> <Leader><Up> :resize +5<CR>
noremap <silent> <Leader><Down> :resize -5<CR>

" Equalize windows width or height
noremap <silent> <Leader>= :wincmd =<CR>

" Maximize window's width or height 
" TODO(#2): close NERDTree if it is open b4 maximizing window and reopen it after that.
noremap <silent> <Leader>mv :wincmd _<CR>
noremap <silent> <Leader>mh :wincmd \|<CR>

" Change window from vertical to horizontal
map <silent> <Leader>w<Up> :call VerticalToHorizontal()<CR>

" Close NERDTree if it's open before flip window from vertical to horizontal and after that reopen it
function g:VerticalToHorizontal()
    if exists("g:NERDTree") && g:NERDTree.IsOpen()
        execute ":NERDTreeClose"
        execute ":wincmd" "t"
        execute ":wincmd" "H"
        execute ":NERDTree"
        execute ":wincmd" "l"
    else
        execute ":wincmd" "t"
        execute ":wincmd" "H"
    endif
endfunc

" Change window from horizontal to vertical
map <silent> <Leader>w<Down> :call HorizontalTovertical()<CR>

" Close NERDTree if it's open before flip window from horizontal to vertical and after that reopen it
function g:HorizontalTovertical()
    if exists("g:NERDTree") && g:NERDTree.IsOpen()
        execute ":NERDTreeClose"
        execute ":wincmd" "t"
        execute ":wincmd" "K"
        execute ":NERDTree"
        execute ":wincmd" "l"
    else
        execute ":wincmd" "t"
        execute ":wincmd" "K"
    endif
endfunc

" ### Terminal ###
" Open terminal window
nnoremap <silent> <Leader>wt :terminal<CR><C-\><C-n>:resize 10<CR>i

" Close terminal window
tnoremap <silent> <Leader>wc <C-\><C-n>:q!<CR>

" Enter terminal normal mode
tnoremap <ESC> <C-\><C-n>

" ### Commands ###
" Command :FixWhiteSpace to remove trailing whitespaces
command! FixWhiteSpace :%s/\s\+$//e
" }}}
