" +-----------------+
" | Some Pre-config |
" +-----------------+
"{{{
" Vi compatible mode is disabled so that Vim things work properly
set nocompatible

" Setting the output encoding shown in the terminal
set encoding=UTF-8

" Let you hide a buffer (i.e. have a buffer that isn't shown in any window)
set hidden

" Enable mouse support
set mouse+=a

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" Always show tabs
set showtabline=2

" Load filetype-specific indent and plugin files
filetype plugin indent on

" Improve smoothness of redrawing
set ttyfast

" Skip redrawing screen in some cases
set lazyredraw

" Longer updatetime (default is 4000ms) leads to noticeable delays
set updatetime=100

" Create the 'undodir' folder and its parents if they don't exist
if !isdirectory($HOME."/.vim/undodir")
    call mkdir($HOME."/.vim/undodir", "p", 0700)
endif

" Backup config
set noswapfile
set nobackup
set nowritebackup
set undodir=~/.vim/undodir
set undofile

" Automatic vim-plug (plugin manager) installation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " --sync flag is used to block the execution until the installer finishes
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}

" +----------------------+
" | Plugins Installation |
" +----------------------+
" {{{
" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" ### Text editing ###
" Code completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Comment stuff out
Plug 'tpope/vim-commentary'

" Easily delete, change and add surroundings in pairs.
Plug 'tpope/vim-surround'

" Support for expanding HTML abbreviations like emmet
Plug 'mattn/emmet-vim'

Plug 'alvan/vim-closetag'

" Snippets
Plug 'honza/vim-snippets'

" A filetype plugin for csv files
Plug 'chrisbra/csv.vim'

" Filetype plugin for LaTeX files.
Plug 'lervag/vimtex'

" Lively previewing LaTeX PDF output
Plug 'xuhdev/vim-latex-live-preview'

" Syntax and indentation support for various filetypes
Plug 'sheerun/vim-polyglot'

" EditorConfig plugin for Vim
Plug 'editorconfig/editorconfig-vim'

" ### Files ###
" Fuzzy finder and more
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" ### Git ###
" Git integration
Plug 'tpope/vim-fugitive'

" Enables :Gbrowse from fugitive.vim to open GitHub URLs.
Plug 'tpope/vim-rhubarb'

" Show VCS diff in the sign column
Plug 'mhinz/vim-signify'

" ### Utilities ###
" Undo history visualizer
Plug 'mbbill/undotree'

" Highlight on yank
Plug 'machakann/vim-highlightedyank'

" Displays indentation level for code indented with spaces
Plug 'yggdroot/indentline'

" ### UI ###
" Color scheme
Plug 'morhetz/gruvbox'

" Statusline and its themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Start screen for Vim
Plug 'mhinz/vim-startify'

Plug 'junegunn/rainbow_parentheses.vim'

" Adds file type icons and its colors (must be the last intalled plugin)
Plug 'ryanoasis/vim-devicons'

" Initialize plugin system
call plug#end()
" }}}

" +--------------+
" | Basic Config |
" +--------------+
" {{{
" Turn on syntax highlighting
syntax on

" Indentation
set tabstop=4     " Number of columns of whitespaces a \t represents
set shiftwidth=4  " A level of indentation is 4 spaces
set softtabstop=4 " Number of spaces that a <Tab> counts
set expandtab     " '\t' character will be expanded into spaces
set autoindent    " Automatically indent newlines
set smartindent   " Does the right thing (mostly) in programs

" Line numbering
set nu
set rnu

" Search config
set hlsearch
set incsearch
set ignorecase
set smartcase

" Visual autocompletion for command-line mode
set wildmenu
set wildmode=list:full

" Line breaks at a word boundary rather than in the middle (when wrapping is
" set)
set linebreak

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Show lines above, below and aside cursor (when possible)
set scrolloff=5
set sidescroll=5

" Folding
autocmd BufWinEnter * call Folding()

function Folding()
    if &fdm != "marker"
        setlocal foldmethod=syntax " Folds are defined by syntax highlighting
        setlocal nofoldenable      " Disables auto folding on opening file
        setlocal foldlevel=99      " Folds with a higher level will be closed (usefull to only fold outer functions)
    endif
endfunction

" Always have the clipboard be the same as my regular clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" Highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
"}}}

" +-------------+
" | Keybindings |
" +-------------+
" {{{
" ### General ###
" Setting <Leader> key to spacebar
let mapleader=" "

" Make backspace behave more reasonably, in that you can backspace over anything
set backspace=indent,eol,start

" Unbind the annoying 'Q' which in normal mode enters Ex mode and sometimes
nmap Q <Nop>

" Search results are centered
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" Ctrl+s to stop searching
nnoremap <silent> <C-s> :nohlsearch<CR>

" Stop indenting when text is pasted
set pastetoggle=<F2>

" Toggle relative numbering
nnoremap <silent> <F3> :set rnu!<CR>

" <Tab> to indent and <S-Tab> to deintent lines
nnoremap <Tab>   >>_
nnoremap <S-Tab> <<_
vnoremap <Tab>   >gv
vnoremap <S-Tab> <gv

" Move lines/blocks up and down (somehow gotta map it to <A-k> and <A-j>)
" Map these scape sequeces to make the Alt key be recognized
map [1;3A] <A-Up>
map [1;3B] <A-Down>
nnoremap <silent> <A-Up>   :m .-2<CR>==
nnoremap <silent> <A-Down> :m .+1<CR>==
vnoremap <silent> <A-Up>   :m '<-2<CR>gv=gv
vnoremap <silent> <A-Down> :m '>+1<CR>gv=gv

" Fast edit '.vimrc' file
nmap <Leader>e :tabnew $MYVIMRC<CR>

" ### Find and Replace ###
" All occurences of selection
vnoremap <Leader>ra y:%s/<C-r><C-r>"//g<Left><Left>

" In line selection
vnoremap <Leader>rl y:s/<C-r><C-r>"//g<Left><Left>

" ### Buffers ###
" Navigation between buffers
nnoremap <silent> <Leader>( :bn<CR>
nnoremap <silent> <Leader>) :bp<CR>

" Close buffer
nnoremap <silent> <Leader>c :bd<CR>

" ### Tabs ###
" Navigate through tabs
nnoremap <silent> tt :tabnew<CR>
nnoremap <silent> tc :tabclose<CR>
nnoremap <silent> tn :tabnext<CR>
nnoremap <silent> tp :tabprev<CR>

" Browser like navigation
" nnoremap <C-S-tab> :tabprevious<CR>
" nnoremap <C-tab>   :tabnext<CR>
" nnoremap <C-t>     :tabnew<CR>
" nnoremap <C-w>     :tabclose<CR>

" ### Windows ###
" Navigation through windows
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" Split window
nnoremap <silent> <C-w>- :sp<CR>
nnoremap <silent> <C-w>\ :vsp<CR>

" Close window
nnoremap <silent> <C-w>c :wincmd c<CR>
" nnoremap <silent> <C-w>c :call CloseWindow()<CR>

" function! CloseWindow()
"     if &buftype == 'terminal'
"         execute ":q!"
"         call feedkeys("\<CR>")
"     else
"         execute ":wincmd" "c"
"     endif
" endfunction

" Resize window
noremap <silent> <C-Left>  :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up>    :resize +3<CR>
noremap <silent> <C-Down>  :resize -3<CR>

" Equalize windows width and height
noremap <silent> <C-w>= :wincmd =<CR>

" Maximize window's width or height
" TODO: close coc-explorer if it is open b4 maximizing window and reopen it after that.
" TODO: Map <C-w>z to maximize either horizontaly or verticaly (tmux like
" behavior)
nnoremap <silent> <C-w>v :wincmd _<CR>
nnoremap <silent> <C-w>h :wincmd \|<CR>

" Change window from vertical to horizontal
" nnoremap <silent> <C-w><Up> :call VerticalToHorizontal()<CR>

" TODO: adapt to coc-explorer
" Close NERDTree if it's open before flip window from vertical to horizontal and after that reopen it
" function g:VerticalToHorizontal()
"     if exists("g:NERDTree") && g:NERDTree.IsOpen()
"         execute ":NERDTreeClose"
"         execute ":wincmd" "t"
"         execute ":wincmd" "H"
"         execute ":NERDTree"
"         execute ":wincmd" "l"
"     else
"         execute ":wincmd" "t"
"         execute ":wincmd" "H"
"     endif
" endfunc

" Change window from horizontal to vertical
" nnoremap <silent> <C-w><Down> :call HorizontalTovertical()<CR>

" Close NERDTree if it's open before flip window from horizontal to vertical and after that reopen it
" function g:HorizontalTovertical()
"     if exists("g:NERDTree") && g:NERDTree.IsOpen()
"         execute ":NERDTreeClose"
"         execute ":wincmd" "t"
"         execute ":wincmd" "K"
"         execute ":NERDTree"
"         execute ":wincmd" "l"
"     else
"         execute ":wincmd" "t"
"         execute ":wincmd" "K"
"     endif
" endfunc

" ### Terminal ###
" Open terminal window
" nnoremap <silent> <C-w>t :terminal<CR><C-\><C-n>:resize 10<CR>i

" Close terminal window
" tnoremap <silent> <C-w>c <C-\><C-n>:q!<CR>

" Enter terminal normal mode
" tnoremap <ESC> <C-\><C-n>

" ### Commands ###
" Command :FixWhiteSpace to remove trailing whitespaces
" TODO: Add a :noh at the final to stop highlighting spaces.
command! FixWhiteSpace :%s/\s\+$//e
" }}}

" +----+
" | UI |
" +----+
"{{{
colorscheme gruvbox

" Enable truecolor and set Vim-specific sequences for RGB colors
if (has("termguicolors"))
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    let &t_Cs = "\e[4:3m"
    let &t_Ce = "\e[4:0m"
    let &t_ut=""
endif

if !has('gui_running')
    set t_Co=256
endif

" Make comments become italic (if your font does support it, of course)
highlight Comment cterm=italic gui=italic
"}}}
